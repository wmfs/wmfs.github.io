<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Tymly Documentation</title>
    <link>https://wmfs.github.io/getting-started/index.xml</link>
    <description>Recent content in Getting-starteds on Tymly Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="https://wmfs.github.io/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started</title>
      <link>https://wmfs.github.io/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/getting-started/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;In this section we&amp;rsquo;ll be installing a few things, writing a simple &lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprint&lt;/a&gt; and executing ourselves a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;install-node-js&#34;&gt;Install Node.js&lt;/h2&gt;

&lt;p&gt;First ensure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; installed&amp;hellip; Tymly requires at least &lt;code&gt;v8.5.0&lt;/code&gt;.
To check everything&amp;rsquo;s OK, try the following from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node --version
v8.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-npm&#34;&gt;Configure npm&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;npm&lt;/code&gt; command (Node Package Manager) comes bundled with Node.js. But again, might be worth a quick check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm --version
3.10.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-npm-behind-a-proxy&#34;&gt;Running npm behind a proxy&lt;/h3&gt;

&lt;p&gt;To download packages from &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npmjs.com&lt;/a&gt;&lt;/strong&gt;, &lt;code&gt;npm&lt;/code&gt; will need access to all your internets.
If you&amp;rsquo;re going to be using Tymly from behind a proxy server, then there&amp;rsquo;s some one-off hurt to get through at his point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm config set proxy       &amp;quot;http://domain%5Cusername:password@servername:port/&amp;quot;
$ npm config set https-proxy &amp;quot;http://domain%5Cusername:password@servername:port/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use URL encoding to include &lt;code&gt;\&lt;/code&gt; characters (i.e. replace them with &lt;code&gt;%5C&lt;/code&gt; as above). More &lt;a href=&#34;http://stackoverflow.com/questions/25660936/using-npm-behind-corporate-proxy-pac&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To check &lt;code&gt;npm&lt;/code&gt; is using your proxy correctly, try the following (which should contact &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npmjs.com&lt;/a&gt;&lt;/strong&gt; to find out the latest published version of the &lt;a href=&#34;https://www.npmjs.com/package/tymly&#34;&gt;tymly package&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm show tymly version
0.0.15
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;To help show what Tymly is about we&amp;rsquo;ll go through the steps to get &lt;code&gt;Hello World!&lt;/code&gt; printed to the console.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All functionality in Tymly is delivered via a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt; and state machines are defined inside &lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprints&lt;/a&gt;.
So to get &lt;code&gt;Hello World!&lt;/code&gt; onto the screen, we&amp;rsquo;re going to need ourselves a blueprint&amp;hellip;&lt;/p&gt;

&lt;p&gt;Nothing to it: make a directory, with a &lt;code&gt;/state-machines&lt;/code&gt; sub-directory and a &lt;code&gt;/blueprint.json&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/hello-world-directory-structure.png&#34; alt=&#34;Directory structure for the Hello World! tutorial&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit the content of the &lt;code&gt;/blueprint.json&lt;/code&gt; file, so it looks like:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;namespace&amp;quot;: &amp;quot;tutorial&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;helloWorld&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,

  &amp;quot;label&amp;quot;: &amp;quot;Hello World! tutorial&amp;quot;,
  &amp;quot;author&amp;quot;: &amp;quot;John Doe&amp;quot;,

  &amp;quot;organisation&amp;quot;: &amp;quot;Tymly&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Provides a simple flow to print &#39;Hello World!&#39; to the console&amp;quot;,
  &amp;quot;tags&amp;quot;: [&amp;quot;tutorial&amp;quot;, &amp;quot;test&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The important takeaway here is that our blueprint is named &lt;code&gt;helloWorld&lt;/code&gt; and it will live within the &lt;code&gt;tutorial&lt;/code&gt; namespace. Blueprints which share the same namespace can refer to each others components. The rest of the &lt;code&gt;blueprint.json&lt;/code&gt; is meta tinsel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now we need to define a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt; for Tymly to execute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/hello-world-json.png&#34; alt=&#34;Revised structure showing hello-world.json file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;and edit its content to:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;Comment&amp;quot;: &amp;quot;Logs &#39;Hello World!&#39; to the console&amp;quot;,
  &amp;quot;StartAt&amp;quot;: &amp;quot;HelloWorld&amp;quot;,
  &amp;quot;States&amp;quot;: {
    &amp;quot;HelloWorld&amp;quot;: {
    &amp;quot;Type&amp;quot;: &amp;quot;Task&amp;quot;,
    &amp;quot;Resource&amp;quot;: &amp;quot;module:logging&amp;quot;,
    &amp;quot;ResourceConfig&amp;quot;: {
      &amp;quot;template&amp;quot;: &amp;quot;Hello World!&amp;quot;
    },
    &amp;quot;End&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s the blueprint finished!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The keys of the &lt;code&gt;States&lt;/code&gt; object are the unique names for each state in the State Machine. So in this example we&amp;rsquo;re working with one state with the name &lt;code&gt;HelloWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;StartsAt&lt;/code&gt; property is mandatory: it indicates the first state which to run when the State Machine is executed&lt;/li&gt;
&lt;li&gt;Please see the &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon States Language specification&lt;/a&gt; for further information about how to conjure a State Machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now we need to create a project to run our new blueprint&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make a totally fresh directory somewhere (&lt;strong&gt;not&lt;/strong&gt; inside the blueprint) and create an &lt;code&gt;/index.js&lt;/code&gt; file inside it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/execute-hello-world.png&#34; alt=&#34;Startings of a Tymly project structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then, from &lt;em&gt;within that directory&lt;/em&gt;, use the &lt;code&gt;npm&lt;/code&gt; command to install the &lt;a href=&#34;https://www.npmjs.com/package/tymly&#34;&gt;tymly package&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install tymly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some huffing-and-puffing a new &lt;code&gt;/node_modules&lt;/code&gt; directory should appear full of wondrous things:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/node_modules.png&#34; alt=&#34;Shows a new node_modules dir has appeared&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we&amp;rsquo;ll make sure Tymly can boot without any problems&amp;hellip; edit the &lt;code&gt;/index.js&lt;/code&gt; to be:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;
var tymly = require(&#39;tymly&#39;)

tymly.boot(
  {
    blueprintPaths: [
      &#39;d:/development/temp/hello-world-blueprint&#39; // Change me!
    ]
  },
  // Callback function
  function (err, services) {
    if (err) {
      console.error(&#39;There were errors.&#39;)
    } else {
      console.log(&#39;Done booting.&#39;)
    }
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you change the blueprint path to point to your &lt;code&gt;hello-world-blueprint&lt;/code&gt; directory, then from the same directory that the &lt;strong&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;/strong&gt; file is located, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;a chunk of output should then appear - for everything to have worked it should end with &lt;code&gt;Done booting.&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a relatively exciting moment! Tymly has booted, consumed the demo blueprint and offered lots of ready-to-use &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-services&#34;&gt;services&lt;/a&gt; - the reason we&amp;rsquo;re not seeing &lt;code&gt;Hello World!&lt;/code&gt; yet is that we haven&amp;rsquo;t used any of those services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s execute a State Machine!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;./index.js&lt;/code&gt; file again, keep the changes you made previously but &lt;strong&gt;replace&lt;/strong&gt; the callback function with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  // Callback function
  function (err, services) {
    if (err) {
      console.error(err)
    } else {
      // No problems booting, so execute the State Machine...
      services.statebox.startExecution(
        {},  // input
        &#39;tutorial_helloWorld_1_0&#39;, // state machine name
        {
          sendResponse: &#39;COMPLETE&#39;
        }, // options
        function (err, executionDescription) {
          if (err) {
            console.error(err)
          } else {
            console.log(&#39;Done.&#39;)
          }
        }
      )
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;As before, if everything goes as expected during the boot process, Tymly will offer some &lt;code&gt;services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Several services are returned to the callback function, including &lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-statebox/&#34;&gt;statebox&lt;/a&gt; that we&amp;rsquo;re using here&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;statebox&lt;/code&gt; service offers an API with a few methods including &lt;code&gt;startExecution&lt;/code&gt;. The minimum required to call &lt;code&gt;startExecution&lt;/code&gt; (as seen in this example) is a &lt;strong&gt;state machine name&lt;/strong&gt; - here we&amp;rsquo;re using &lt;code&gt;tutorial_helloWorld_1_0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;These unique names are conjured by combining the blueprint&amp;rsquo;s namespace (&lt;code&gt;tutorial&lt;/code&gt;), the state machines&amp;rsquo;s name (&lt;code&gt;helloWorld&lt;/code&gt; - which has been inferred from the &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; filename) and the version number of the state machine (as defined in the &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; file).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;once the replacement callback function is in-place, re-run:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Boom!&lt;/strong&gt; You should now see &lt;code&gt;Hello World!&lt;/code&gt; printed on the console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this first tutorial we&amp;rsquo;ve used some of the major components of the Tymly framework (&lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprints&lt;/a&gt;, &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machines&lt;/a&gt; and &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-services&#34;&gt;services&lt;/a&gt;). The good news is that the distance from this point to running more complex state machines only requires the introduction of a few more components.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>