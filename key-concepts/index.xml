<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Key-concepts on Tymly Documentation</title>
    <link>https://wmfs.github.io/key-concepts/index.xml</link>
    <description>Recent content in Key-concepts on Tymly Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="https://wmfs.github.io/key-concepts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Key Concepts</title>
      <link>https://wmfs.github.io/key-concepts/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/key-concepts/</guid>
      <description>

&lt;h2 id=&#34;blueprints&#34;&gt;Blueprints&lt;/h2&gt;

&lt;p&gt;In Tymly, a &amp;ldquo;&lt;strong&gt;blueprint&lt;/strong&gt;&amp;rdquo; describes related functionality that adds value to an organization.
Typically a blueprint will describe all the workflows, rules and forms affecting a business function or team - but they&amp;rsquo;re equally suited to describing open data and ETL pipelines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/inside-a-blueprint.png#center&#34; alt=&#34;Cartoon illustration of people looking inside a Blueprint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Blueprints equate to a directory containing a simple &lt;code&gt;blueprint.json&lt;/code&gt; file and one-or-more sub-directories:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sub-directory&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blueprints are predominantly declarative - preferring JSON definitions over hand-coded functions. But for those times when only code will do, blueprints can supply supplemental Javascript functions too.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/registry-keys&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Consider a blueprint that defines a simple workflow that sends a Tweet - what Twitter username/password should be used? This is where &lt;em&gt;Registry Keys&lt;/em&gt; come in useful&amp;hellip; a simple key/value store inside Tymly, where keys are declared inside this sub-directory. To help conjure administrative screens and help validation, the required value content is described using JSON Schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/state-machines&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file inside this sub-directory will be used to conjure a State Machine for orchestrating a workflow. Tymly uses the open &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon State Language&lt;/a&gt; to describe State Machines.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/models&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This sub-directory deals with the &lt;code&gt;M&lt;/code&gt; portion of &lt;code&gt;MVC&lt;/code&gt; - each JSON file in here defines a data model that can be subsequently used by a State Machine. Nested documents are supported along with a couple of extensions to help describe database indexes and primary keys. Tymly uses the JSON Schema standard for describing data models.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;JSON files providing &amp;#39;tags&amp;#39; which are used throughout Tymly to help categorise things and aid discovery&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/images&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A place to put images that can be served-up in Forms and similar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/forms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;One JSON file per Form (currently need to be in &lt;a href=&#34;http://schemaform.io/&#34;&gt;Schemaform&lt;/a&gt; format)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/rankings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file here will help configure everything required to rank a set of documents by a score derived from a variety of sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/search-docs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file is used to translates a model document into standard properties for searching.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt; &lt;strong&gt;We use &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; to help quickly scaffold new components in Tymly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running the &lt;code&gt;yo tymly:blueprint&lt;/code&gt; command will get you building basic blueprints in no time. Please see the &lt;a href=&#34;https://wmfs.github.io/getting-started/&#34;&gt;Getting started&lt;/a&gt; section for help with setting-up Yeoman.&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;state-machines&#34;&gt;State Machines&lt;/h2&gt;

&lt;p&gt;All the events that occur inside Tymly are orchestrated by an army of &lt;del&gt;Finite&lt;/del&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;State Machines&lt;/a&gt;.
Conceptually, a State Machine is nothing more than a collection of &lt;a href=&#34;https://states-language.net/spec.html#states-fields&#34;&gt;States&lt;/a&gt; that are wired together to describe an executable process.
Each state needs to be assigned a &lt;strong&gt;Type&lt;/strong&gt;, some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#task-state&#34;&gt;Task&lt;/a&gt;&lt;/strong&gt; states are where all the heavy-lifting is done. Tasks cover all manner of processing: importing data, sending e-mails, form-filling etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#choice-state&#34;&gt;Choice&lt;/a&gt;&lt;/strong&gt; states are used to implement conditional branching inside a state machine (i.e. configuring states so that they execute only if a certain expression is satisfied).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#parallel-state&#34;&gt;Parallel&lt;/a&gt;&lt;/strong&gt; states allow for the concurrent running of two or more states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If Tymly were to be considered in terms of Model, View, Controller&amp;hellip; then State Machines are all about the &lt;em&gt;Controller&lt;/em&gt;.
Tymly uses the open &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon States Specification&lt;/a&gt; to define State Machines inside blueprints, as such, the following State Machine constructs are supported:&lt;/p&gt;

&lt;table &gt;
    &lt;tr&gt;
        &lt;th&gt;Sequential&lt;/th&gt;
        &lt;th&gt;Choice&lt;/th&gt;
        &lt;th&gt;Parallel&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;img src=&#34;https://wmfs.github.io/images/sequential-states.png&#34;/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&#34;https://wmfs.github.io/images/choice-states.png&#34;/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&#34;https://wmfs.github.io/images/parallel-states.png&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;pre style=&#34;margin:0; padding:1em;&#34;&gt;
{
 &#34;States&#34;: {
  &#34;Load&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:findingById&#34;,
   &#34;InputPath&#34;: &#34;$.key&#34;,
   &#34;Next&#34;: &#34;Form&#34;
  },
  &#34;Form&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:formFilling&#34;,
   &#34;ResultPath&#34;: &#34;$.formData&#34;,
   &#34;Next&#34;: &#34;Save&#34;
  },
  &#34;Save&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:upserting&#34;,
   &#34;InputPath&#34;: &#34;$.formData&#34;,
   &#34;End&#34;: &#34;True&#34;
  }
 }
}
&lt;/pre&gt;
&lt;/td&gt;

&lt;td&gt;
&lt;pre style=&#34;margin:0;padding:1em;&#34;&gt;
{
 &#34;States&#34;: {
  &#34;ConsiderLanguage&#34;: {
   &#34;Type&#34;: &#34;Choice&#34;,
   &#34;Choices&#34;: [
    {
     &#34;Variable&#34;: &#34;$.language&#34;,
     &#34;StringEquals&#34;: &#34;Spanish&#34;
     &#34;Next&#34;: &#34;SpanishGreeting&#34;
    }
   ],
   &#34;Default&#34;: &#34;EnglishGreeting&#34;
  },
  &#34;SpanishGreeting&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:logging&#34;,
   &#34;ResourceConfig&#34;: {
    &#34;template&#34;: &#34;Hola&#34;
   },
   &#34;End&#34;: &#34;True&#34;
  },
  &#34;EnglishGreeting&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:logging&#34;,
   &#34;ResourceConfig&#34;: {
    &#34;template&#34;: &#34;Hello&#34;
   },
   &#34;End&#34;: &#34;True&#34;
  }
 }
}
&lt;/pre&gt;
&lt;/td&gt;

&lt;td&gt;
&lt;pre style=&#34;margin:0;padding:1em;&#34;&gt;
{
 &#34;States&#34;: {
  &#34;ParallelThings&#34;: {
   &#34;Type&#34;: &#34;Parallel&#34;,
   &#34;Branches&#34;: [
    {
     &#34;StartAt&#34;: &#34;ProcessAvatar&#34;,
     &#34;States&#34;: {
      &#34;ProcessAvatar&#34; : {
       &#34;Type&#34;: &#34;Task&#34;,
       &#34;Resource&#34;: &#34;module:crop&#34;
       &#34;End&#34;: true
      }
     }
    },
    {
     &#34;StartAt&#34;: &#34;CreateAccount&#34;,
     &#34;States&#34;: {
      &#34;CreateAccount&#34; : {
       &#34;Type&#34;: &#34;Task&#34;,
       &#34;Resource&#34;: &#34;module:onboard&#34;
       &#34;End&#34;: true
      }
     }
    }
   ],
   &#34;Next&#34;: &#34;SendWelcomeEmail&#34;
  },
  &#34;SendWelcomeEmail&#34;: {
   &#34;Type&#34;: &#34;Task&#34;,
   &#34;Resource&#34;: &#34;module:sendEmail&#34;
   &#34;End&#34;: true
  }
 }
}
&lt;/pre&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;If the purpose of a State Machine is to execute Task states in a controlled manner, then it could be argued Tymly isn&amp;rsquo;t too dissimilar to a microservice architecture.
That said, instead of coordinating remote services over HTTP, Tymly State Machines orchestrate plain-old Javascript object instances.
In Tymly, these objects are conjured from simple classes termed &amp;ldquo;&lt;strong&gt;Resources&lt;/strong&gt;&amp;rdquo;. Each Task State therefore needs to be associated with a single &lt;em&gt;resource&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/double-form-state-machine.png#center&#34; alt=&#34;A state machine containing two form-filling state tasks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the State Machine illustrated above we have a couple of Task states (one for showing an order-form to a user and a second for showing a survey-form).
Though these states will be configured differently inside the State Machine JSON, they&amp;rsquo;ll both be associated with a common &lt;code&gt;formFilling&lt;/code&gt; &lt;strong&gt;resource&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt;
As described below, Tymly is extended through a plugin mechanism which can supply new-and-exciting resources. Again, Yeoman is used to help get things started, the &lt;code&gt;yo tymly:resource&lt;/code&gt; will scaffold a basic resource for you to hack around with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please see the &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-state-resources&#34;&gt;list of core resources&lt;/a&gt; for more detailed information about the type of thing possible out-of-the-box with Tymly.&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Tymly takes a batteries-included approach and hopefully ships with enough &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-state-resources&#34;&gt;Resources&lt;/a&gt; to cover-off most of the the duller business processes out there
To help try and keep things minimal and manageable, Resources (and other components) are bundled inside Tymly &amp;ldquo;&lt;strong&gt;Plugins&lt;/strong&gt;&amp;rdquo;. The following are available out-of-the-box:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly&#34;&gt;Tymly&lt;/a&gt; package itself has a &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly/lib/plugin&#34;&gt;built-in plugin&lt;/a&gt; which provides low-level components to help get the party started&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-alerts-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some alerting options to the Tymly framework&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-etl-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A collection of states for helping with Extract, Transform and Load tasks.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-express-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes the Tymly framework via an Express.js web app.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-forms-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some form capabilities to Tymly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-pg-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Replace Tymly&amp;#39;s out-the-box memory storage with PostgreSQL&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-rankings-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles ranking of data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/wmfs/tymly#readme&#34;&gt;tymly-solr-plugin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles interaction with Apache Solr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt;
Organizations will undoubtedly have specialist requirements of their own - this is where plugins shine, allowing Tymly to be easily extended and adapted as required.&lt;/p&gt;

&lt;p&gt;And again, Yeoman can help things along. Running &lt;code&gt;yo tymly:plugin&lt;/code&gt; will generate a skeleton plugin into which new resources and related components can be added.&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>