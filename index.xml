<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tymly Documentation</title>
    <link>https://wmfs.github.io/index.xml</link>
    <description>Recent content on Tymly Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="https://wmfs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Key Concepts</title>
      <link>https://wmfs.github.io/key-concepts/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/key-concepts/</guid>
      <description>

&lt;h2 id=&#34;blueprints&#34;&gt;Blueprints&lt;/h2&gt;

&lt;p&gt;In Tymly, &amp;ldquo;&lt;strong&gt;blueprints&lt;/strong&gt;&amp;rdquo; provide a way to describe some related components that can coalesce to produce useful software.
Typically a blueprint will describe all the workflows, rules and UI affecting a business function or team - but they&amp;rsquo;re equally suited to describing open-data products and ETL pipelines as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/inside-a-blueprint.png#center&#34; alt=&#34;Cartoon illustration of people looking inside a Blueprint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Blueprints equate to a directory containing a simple &lt;code&gt;blueprint.json&lt;/code&gt; file and one-or-more sub-directories:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sub-directory&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/functions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Blueprints are predominantly declarative - preferring JSON definitions over hand-coded functions. But for those times when only code will do, blueprints can supply supplemental Javascript functions too.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/registry-keys&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Consider a blueprint that defines a simple workflow that sends a Tweet - what Twitter username/password should be used? This is where &lt;em&gt;Registry Keys&lt;/em&gt; come in useful&amp;hellip; a simple key/value store inside Tymly, where keys are declared inside this sub-directory. To help conjure administrative screens and help validation, the required value content is described using JSON Schema.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/state-machines&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file inside this sub-directory will be used to conjure a State Machine for orchestrating a workflow. Tymly uses the open &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon State Language&lt;/a&gt; to describe State Machines.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/models&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This sub-directory deals with the &lt;code&gt;M&lt;/code&gt; portion of &lt;code&gt;MVC&lt;/code&gt; - each JSON file in here defines a data model that can be subsequently used by a State Machine. Nested documents are supported along with a couple of extensions to help describe database indexes and primary keys. Tymly uses the JSON Schema standard for describing data models.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;JSON files providing &amp;#39;tags&amp;#39; which are used throughout Tymly to help categorise things and aid discovery&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/images&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A place to put images that can be served-up in Forms and similar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/forms&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;One JSON file per Form (currently need to be in &lt;a href=&#34;http://schemaform.io/&#34;&gt;Schemaform&lt;/a&gt; format)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/rankings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file here will help configure everything required to rank a set of documents by a score derived from a variety of sources&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/search-docs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Each JSON file is used to translates a model document into standard properties for searching.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt; &lt;strong&gt;We use &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; to help quickly scaffold new components in Tymly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Running the &lt;code&gt;yo tymly:blueprint&lt;/code&gt; command will get you building basic blueprints in no time. Please see the &lt;a href=&#34;https://wmfs.github.io/getting-started/&#34;&gt;Getting started&lt;/a&gt; section for help with setting-up Yeoman.&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;state-machines&#34;&gt;State machines&lt;/h2&gt;

&lt;p&gt;All the events that occur inside Tymly are orchestrated by an army of &lt;del&gt;Finite&lt;/del&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;State Machines&lt;/a&gt;.
Conceptually, a state machine is nothing more than a collection of &lt;a href=&#34;https://states-language.net/spec.html#states-fields&#34;&gt;states&lt;/a&gt; that are wired together to describe an executable process.
Each state needs to be assigned a &lt;strong&gt;Type&lt;/strong&gt;, some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#task-state&#34;&gt;Task&lt;/a&gt;&lt;/strong&gt; states are where all the heavy-lifting is done. Tasks cover all manner of processing: importing data, sending e-mails, form-filling etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#choice-state&#34;&gt;Choice&lt;/a&gt;&lt;/strong&gt; states are used to implement conditional branching inside a state machine (i.e. configuring states so that they execute only if a certain expression is satisfied).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://states-language.net/spec.html#parallel-state&#34;&gt;Parallel&lt;/a&gt;&lt;/strong&gt; states allow for the concurrent running of two or more states.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If Tymly were to be considered in terms of Model, View, Controller&amp;hellip; then State Machines are all about the &lt;em&gt;Controller&lt;/em&gt;.
Tymly uses the open &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon States Specification&lt;/a&gt; to define state machines inside blueprints, as such, the following constructs are supported:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/sequential-states.png&#34; alt=&#34;A diagram showing three states, stringed together sequentially&#34;/&gt;
&lt;img src=&#34;https://wmfs.github.io/images/choice-states.png&#34; alt=&#34;A diagram showing three states, but the final two illustrate two branches&#34;/&gt;
&lt;img src=&#34;https://wmfs.github.io/images/parallel-states.png&#34; alt=&#34;A diagram again with three states, but the first two execute simultaneously&#34;&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;If the purpose of a State Machine is to execute Task states in a controlled manner, then it could be argued Tymly isn&amp;rsquo;t too dissimilar to a microservice architecture.
That said, instead of coordinating remote services over HTTP, Tymly State Machines orchestrate plain-old Javascript object instances.
In Tymly, these objects are conjured from simple classes termed &amp;ldquo;&lt;strong&gt;Resources&lt;/strong&gt;&amp;rdquo;. Each Task State therefore needs to be associated with a single &lt;em&gt;resource&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/double-form-state-machine.png#center&#34; alt=&#34;A state machine containing two form-filling state tasks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the illustration above we have a couple of Task states (one for showing an order-form to a user and a second for showing a survey-form).
Though these states will be configured differently inside the State Machine JSON, they&amp;rsquo;ll both be associated with a common &lt;code&gt;formFilling&lt;/code&gt; &lt;strong&gt;resource&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt;
As described below, Tymly is extended through a plugin mechanism which can supply new capabilities. Again, Yeoman is used to help get things started, the &lt;code&gt;yo tymly:resource&lt;/code&gt; will scaffold a basic resource for you to hack around with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please see the &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-state-resources&#34;&gt;list of core resources&lt;/a&gt; for more detailed information about the type of thing possible out-of-the-box with Tymly.&lt;/strong&gt;&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/components.png&#34; alt=&#34;Diagram showing how plugins/blueprints/config/services relate to each other&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tymly takes a batteries-included approach and hopefully ships with enough &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-state-resources&#34;&gt;Resources&lt;/a&gt; to conjure most business processes out there.
To help try and keep things minimal and manageable, Resources (and other components) are bundled inside Tymly &amp;ldquo;&lt;strong&gt;Plugins&lt;/strong&gt;&amp;rdquo;. The following are available out-of-the-box:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt;tymly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly&#34;&gt;Tymly&lt;/a&gt; package itself has a &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly/lib/plugin&#34;&gt;built-in plugin&lt;/a&gt; which provides low-level components to help get the party started&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-alerts-plugin&#34;&gt;alerts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some alerting options to the Tymly framework&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-etl-plugin&#34;&gt;etl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A collection of states for helping with Extract, Transform and Load tasks.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-express-plugin&#34;&gt;express&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes the Tymly framework via an Express.js web app.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-forms-plugin&#34;&gt;forms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some form capabilities to Tymly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt;pg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Replace Tymly&amp;#39;s out-the-box memory storage with PostgreSQL&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-rankings-plugin&#34;&gt;rankings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles ranking of data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-solr-plugin&#34;&gt;solr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles interaction with Apache Solr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/yeoman.png#floatleft&#34; alt=&#34;Yeoman logo&#34; /&gt;
Organizations will undoubtedly have specialist requirements of their own - this is where plugins shine, allowing Tymly to be easily extended and adapted as required.&lt;/p&gt;

&lt;p&gt;And again, Yeoman can help things along. Running &lt;code&gt;yo tymly:plugin&lt;/code&gt; will generate a skeleton plugin into which new resources and related components can be added.&lt;/p&gt;

&lt;div style=&#34;clear: both;&#34;&gt;&lt;/div&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;alerts&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-alerts-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-alerts-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Adds some alerting options to the Tymly framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-alerts-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-alerts-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-alerts-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/alerts-email&#34;&gt;email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Integrates Tymly with &lt;a href=&#34;https://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt; to offer email-sending capabilities&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/alerts-sending-email&#34;&gt;sendingEmail&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;For sending an emails - just a thin wrapper over &lt;a href=&#34;https://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;etl&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-etl-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-etl-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A collection of states for helping with Extract, Transform and Load tasks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-etl-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-etl-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-etl-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/etl-processing-csv-files&#34;&gt;processingCsvFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Smash CSV files into more manageable files based on column values - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/smithereens&#34;&gt;Smithereens&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/etl-processing-xml-files&#34;&gt;processingXmlFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes an XML file and converts it to CSV&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;express&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-express-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-express-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Exposes the Tymly framework via an Express.js web app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-express-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-express-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-express-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/express-auth&#34;&gt;auth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides JWT-based authentication capabilities&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/express-server&#34;&gt;server&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a CORS-enabled Express.js server. Includes serving of static assets as supplied via Bluepints&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/express-statebox-api&#34;&gt;stateboxApi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes the core Tymly abilities (start, get, update and cancel) over a JWT-secured REST API&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;forms&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-forms-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-forms-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Adds some form capabilities to Tymly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-forms-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-forms-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-forms-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/forms-forms&#34;&gt;forms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes UI configuration (as supplied via blueprints in &lt;a href=&#34;http://schemaform.io/&#34;&gt;Schema Form&lt;/a&gt; format)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/forms-form-filling&#34;&gt;formFilling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Indicates which form a human needs to interact with - and waits until a response is received&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;pg&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-pg-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-pg-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Replace Tymly&amp;#39;s out-the-box memory storage with PostgreSQL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-pg-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-pg-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-pg-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/pg-storage&#34;&gt;storage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Replaces the default in-memory storage solution with a MongoDB-backed alternative&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/pg-exporting-csv-delta-file&#34;&gt;exportingCsvDeltaFile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Outputs change-only-update CSV files (or “delta” files) that contain all the necessary actions required to re-synchronize rows in a cloned table - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/pg-delta-file&#34;&gt;pg-delta-file&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/pg-importing-csv-files&#34;&gt;importingCsvFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes a specifically-named directory structure of CSV files and conjures bulk insert, update and delete statements and applies them to a PostgreSQL database - just a thin wrapper over &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/supercopy&#34;&gt;Supercopy&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/pg-synchronizing-table&#34;&gt;synchronizingTable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes the contents of one PostgreSQL table, applies a transformation function to each row and ensures a target table is kept in sync - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/pg-telepods&#34;&gt;pg-telepods&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;rankings&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-rankings-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-rankings-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Plugin which handles ranking of data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-rankings-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-rankings-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-rankings-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/rankings-rankings&#34;&gt;rankings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds a ranking engine&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/rankings-refresh-ranking&#34;&gt;refreshRanking&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Regenerates a database view of ranked data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;solr&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly-solr-plugin/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly-solr-plugin/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Plugin which handles interaction with Apache Solr&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly-solr-plugin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly-solr-plugin/lib/components&#34;&gt;/tymly/plugins/tymly-solr-plugin&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/solr-solr&#34;&gt;solr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds Solr support&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;tymly&#39; plugin</title>
      <link>https://wmfs.github.io/plugins/tymly/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/plugins/tymly/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A framework for building and sharing workflows in Node.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;package-details&#34;&gt;Package details&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt;  &lt;code&gt;tymly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version:&lt;/strong&gt;  &lt;code&gt;0.0.15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/plugins/tymly/lib/components&#34;&gt;/tymly/plugins/tymly&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;commands&#34;&gt;commands&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/commands/tymly-env&#34;&gt;env&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allows a state to refer to an environment variable&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/commands/tymly-sprintf&#34;&gt;sprintf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Derive a runtime value using a &lt;a href=&#34;https://github.com/alexei/sprintf.js&#34;&gt;sprintf&lt;/a&gt; string template&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/commands/tymly-value&#34;&gt;value&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Get a value from the Tymly&amp;#39;s context&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;services&#34;&gt;services&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-blueprint-docs&#34;&gt;blueprintDocs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allows tracking of documents created via blueprints, so they don&amp;#39;t get reverted when Tymly restarts&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-caches&#34;&gt;caches&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds &lt;a href=&#34;https://www.npmjs.com/package/lru-cache&#34;&gt;lru-cache&lt;/a&gt;-based caching to Tymly. Note defaults will be used if no &lt;code&gt;caches&lt;/code&gt; configuration is provided.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-commands&#34;&gt;commands&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Service to support blueprint commands&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-expression&#34;&gt;expression&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides safe, &lt;a href=&#34;https://www.npmjs.com/package/esprima&#34;&gt;Esprima&lt;/a&gt;-based expression evaluation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-functions&#34;&gt;functions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds ability to run custom logic as defined in a blueprint&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-inventory&#34;&gt;inventory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collates component information by scanning plugins. The results can then be used by tooling and documentation-generators&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-rbac&#34;&gt;rbac&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides JWT-based authentication capabilities&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-registry&#34;&gt;registry&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a mechanism for states to refer to site-specific values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-statebox&#34;&gt;statebox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Runs state machines defined in Amazon States Language&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-storage&#34;&gt;storage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;This is the default in-memory storage service that ships with Tymly. Useful for testing and not much else.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-tags&#34;&gt;tags&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a generic mechanism to help tag/classify search results, tasks, forms etc.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-temp&#34;&gt;temp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Helps configure and manage a temporary folder for Tymly to use&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-users&#34;&gt;users&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds user-management capabilities to Tymly (e.g. authorization checks, what flows/forms a user is entitled to instigate etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stateresources&#34;&gt;stateResources&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/tymly-finding-by-id&#34;&gt;findingById&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fetches a single document by its primary key values from storage and adds to a Tymly context&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/tymly-finding-one&#34;&gt;findingOne&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Finds one document from storage&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/tymly-logging&#34;&gt;logging&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logs to the console via a template&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/reference/state-resources/tymly-upserting&#34;&gt;upserting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Perists a document to storage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://wmfs.github.io/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://wmfs.github.io/getting-started/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;In this section we&amp;rsquo;ll be installing a few things, writing a simple &lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprint&lt;/a&gt; and executing ourselves a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;install-node-js&#34;&gt;Install Node.js&lt;/h2&gt;

&lt;p&gt;First ensure you have &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; installed&amp;hellip; Tymly requires at least &lt;code&gt;v8.5.0&lt;/code&gt;.
To check everything&amp;rsquo;s OK, try the following from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node --version
v8.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-npm&#34;&gt;Configure npm&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;npm&lt;/code&gt; command (Node Package Manager) comes bundled with Node.js. But again, might be worth a quick check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm --version
3.10.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-npm-behind-a-proxy&#34;&gt;Running npm behind a proxy&lt;/h3&gt;

&lt;p&gt;To download packages from &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npmjs.com&lt;/a&gt;&lt;/strong&gt;, &lt;code&gt;npm&lt;/code&gt; will need access to all your internets.
If you&amp;rsquo;re going to be using Tymly from behind a proxy server, then there&amp;rsquo;s some one-off hurt to get through at his point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm config set proxy       &amp;quot;http://domain%5Cusername:password@servername:port/&amp;quot;
$ npm config set https-proxy &amp;quot;http://domain%5Cusername:password@servername:port/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use URL encoding to include &lt;code&gt;\&lt;/code&gt; characters (i.e. replace them with &lt;code&gt;%5C&lt;/code&gt; as above). More &lt;a href=&#34;http://stackoverflow.com/questions/25660936/using-npm-behind-corporate-proxy-pac&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To check &lt;code&gt;npm&lt;/code&gt; is using your proxy correctly, try the following (which should contact &lt;strong&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npmjs.com&lt;/a&gt;&lt;/strong&gt; to find out the latest published version of the &lt;a href=&#34;https://www.npmjs.com/package/tymly&#34;&gt;tymly package&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm show tymly version
0.0.15
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;To help show what Tymly is about we&amp;rsquo;ll go through the steps to get &lt;code&gt;Hello World!&lt;/code&gt; printed to the console.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All functionality in Tymly is delivered via a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt; and state machines are defined inside &lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprints&lt;/a&gt;.
So to get &lt;code&gt;Hello World!&lt;/code&gt; onto the screen, we&amp;rsquo;re going to need ourselves a blueprint&amp;hellip;&lt;/p&gt;

&lt;p&gt;Nothing to it: make a directory, with a &lt;code&gt;/state-machines&lt;/code&gt; sub-directory and a &lt;code&gt;/blueprint.json&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/hello-world-directory-structure.png&#34; alt=&#34;Directory structure for the Hello World! tutorial&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit the content of the &lt;code&gt;/blueprint.json&lt;/code&gt; file, so it looks like:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;namespace&amp;quot;: &amp;quot;tutorial&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;helloWorld&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,

  &amp;quot;label&amp;quot;: &amp;quot;Hello World! tutorial&amp;quot;,
  &amp;quot;author&amp;quot;: &amp;quot;John Doe&amp;quot;,

  &amp;quot;organisation&amp;quot;: &amp;quot;Tymly&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Provides a simple flow to print &#39;Hello World!&#39; to the console&amp;quot;,
  &amp;quot;tags&amp;quot;: [&amp;quot;tutorial&amp;quot;, &amp;quot;test&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The important takeaway here is that our blueprint is named &lt;code&gt;helloWorld&lt;/code&gt; and it will live within the &lt;code&gt;tutorial&lt;/code&gt; namespace. Blueprints which share the same namespace can refer to each others components. The rest of the &lt;code&gt;blueprint.json&lt;/code&gt; is meta tinsel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now we need to define a &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machine&lt;/a&gt; for Tymly to execute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/hello-world-json.png&#34; alt=&#34;Revised structure showing hello-world.json file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;and edit its content to:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;version&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;Comment&amp;quot;: &amp;quot;Logs &#39;Hello World!&#39; to the console&amp;quot;,
  &amp;quot;StartAt&amp;quot;: &amp;quot;HelloWorld&amp;quot;,
  &amp;quot;States&amp;quot;: {
    &amp;quot;HelloWorld&amp;quot;: {
    &amp;quot;Type&amp;quot;: &amp;quot;Task&amp;quot;,
    &amp;quot;Resource&amp;quot;: &amp;quot;module:logging&amp;quot;,
    &amp;quot;ResourceConfig&amp;quot;: {
      &amp;quot;template&amp;quot;: &amp;quot;Hello World!&amp;quot;
    },
    &amp;quot;End&amp;quot;: true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s the blueprint finished!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The keys of the &lt;code&gt;States&lt;/code&gt; object are the unique names for each state in the State Machine. So in this example we&amp;rsquo;re working with one state with the name &lt;code&gt;HelloWorld&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;StartsAt&lt;/code&gt; property is mandatory: it indicates the first state which to run when the State Machine is executed&lt;/li&gt;
&lt;li&gt;Please see the &lt;a href=&#34;https://states-language.net/spec.html&#34;&gt;Amazon States Language specification&lt;/a&gt; for further information about how to conjure a State Machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now we need to create a project to run our new blueprint&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make a totally fresh directory somewhere (&lt;strong&gt;not&lt;/strong&gt; inside the blueprint) and create an &lt;code&gt;/index.js&lt;/code&gt; file inside it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/execute-hello-world.png&#34; alt=&#34;Startings of a Tymly project structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then, from &lt;em&gt;within that directory&lt;/em&gt;, use the &lt;code&gt;npm&lt;/code&gt; command to install the &lt;a href=&#34;https://www.npmjs.com/package/tymly&#34;&gt;tymly package&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install tymly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some huffing-and-puffing a new &lt;code&gt;/node_modules&lt;/code&gt; directory should appear full of wondrous things:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wmfs.github.io/images/node_modules.png&#34; alt=&#34;Shows a new node_modules dir has appeared&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now we&amp;rsquo;ll make sure Tymly can boot without any problems&amp;hellip; edit the &lt;code&gt;/index.js&lt;/code&gt; to be:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;
var tymly = require(&#39;tymly&#39;)

tymly.boot(
  {
    blueprintPaths: [
      &#39;d:/development/temp/hello-world-blueprint&#39; // Change me!
    ]
  },
  // Callback function
  function (err, services) {
    if (err) {
      console.error(&#39;There were errors.&#39;)
    } else {
      console.log(&#39;Done booting.&#39;)
    }
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you change the blueprint path to point to your &lt;code&gt;hello-world-blueprint&lt;/code&gt; directory, then from the same directory that the &lt;strong&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;/strong&gt; file is located, run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;a chunk of output should then appear - for everything to have worked it should end with &lt;code&gt;Done booting.&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a relatively exciting moment! Tymly has booted, consumed the demo blueprint and offered lots of ready-to-use &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-services&#34;&gt;services&lt;/a&gt; - the reason we&amp;rsquo;re not seeing &lt;code&gt;Hello World!&lt;/code&gt; yet is that we haven&amp;rsquo;t used any of those services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s execute a State Machine!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;./index.js&lt;/code&gt; file again, keep the changes you made previously but &lt;strong&gt;replace&lt;/strong&gt; the callback function with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  // Callback function
  function (err, services) {
    if (err) {
      console.error(err)
    } else {
      // No problems booting, so execute the State Machine...
      services.statebox.startExecution(
        {},  // input
        &#39;tutorial_helloWorld_1_0&#39;, // state machine name
        {
          sendResponse: &#39;COMPLETE&#39;
        }, // options
        function (err, executionDescription) {
          if (err) {
            console.error(err)
          } else {
            console.log(&#39;Done.&#39;)
          }
        }
      )
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;As before, if everything goes as expected during the boot process, Tymly will offer some &lt;code&gt;services&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Several services are returned to the callback function, including &lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-statebox/&#34;&gt;statebox&lt;/a&gt; that we&amp;rsquo;re using here&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;statebox&lt;/code&gt; service offers an API with a few methods including &lt;code&gt;startExecution&lt;/code&gt;. The minimum required to call &lt;code&gt;startExecution&lt;/code&gt; (as seen in this example) is a &lt;strong&gt;state machine name&lt;/strong&gt; - here we&amp;rsquo;re using &lt;code&gt;tutorial_helloWorld_1_0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;These unique names are conjured by combining the blueprint&amp;rsquo;s namespace (&lt;code&gt;tutorial&lt;/code&gt;), the state machines&amp;rsquo;s name (&lt;code&gt;helloWorld&lt;/code&gt; - which has been inferred from the &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; filename) and the version number of the state machine (as defined in the &lt;code&gt;/state-machines/hello-world.json&lt;/code&gt; file).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;once the replacement callback function is in-place, re-run:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Boom!&lt;/strong&gt; You should now see &lt;code&gt;Hello World!&lt;/code&gt; printed on the console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this first tutorial we&amp;rsquo;ve used some of the major components of the Tymly framework (&lt;a href=&#34;https://wmfs.github.io/key-concepts/#blueprints&#34;&gt;blueprints&lt;/a&gt;, &lt;a href=&#34;https://wmfs.github.io/key-concepts/#state-machines&#34;&gt;state machines&lt;/a&gt; and &lt;a href=&#34;https://wmfs.github.io/reference/#list-of-services&#34;&gt;services&lt;/a&gt;). The good news is that the distance from this point to running more complex state machines only requires the introduction of a few more components.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>https://wmfs.github.io/reference/</link>
      <pubDate>Sun, 08 Oct 2017 21:06:27 +0000</pubDate>
      
      <guid>https://wmfs.github.io/reference/</guid>
      <description>

&lt;h3 id=&#34;contents&#34;&gt;Contents&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-plugins&#34;&gt;List of plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-state-resources&#34;&gt;List of state resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-commands&#34;&gt;List of commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#list-of-services&#34;&gt;List of services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-of-plugins&#34;&gt;List of plugins&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Plugins extend Tymly with functionally-related State Classes, Commands and Services etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt;tymly&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly&#34;&gt;Tymly&lt;/a&gt; package itself has a &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/packages/tymly/lib/plugin&#34;&gt;built-in plugin&lt;/a&gt; which provides low-level components to help get the party started&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-alerts-plugin&#34;&gt;alerts&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some alerting options to the Tymly framework&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-etl-plugin&#34;&gt;etl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A collection of states for helping with Extract, Transform and Load tasks.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-express-plugin&#34;&gt;express&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes the Tymly framework via an Express.js web app.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-forms-plugin&#34;&gt;forms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds some form capabilities to Tymly&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt;pg&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Replace Tymly&amp;#39;s out-the-box memory storage with PostgreSQL&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-rankings-plugin&#34;&gt;rankings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles ranking of data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-solr-plugin&#34;&gt;solr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin which handles interaction with Apache Solr&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;list-of-state-resources&#34;&gt;List of State Resources&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Task states can refer to resources, here is a list of all the included State Resources&amp;hellip;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;State Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/pg-exporting-csv-delta-file&#34;&gt;exportingCsvDeltaFile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Outputs change-only-update CSV files (or “delta” files) that contain all the necessary actions required to re-synchronize rows in a cloned table - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/pg-delta-file&#34;&gt;pg-delta-file&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt; pg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/tymly-finding-by-id&#34;&gt;findingById&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fetches a single document by its primary key values from storage and adds to a Tymly context&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/tymly-finding-one&#34;&gt;findingOne&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Finds one document from storage&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/forms-form-filling&#34;&gt;formFilling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Indicates which form a human needs to interact with - and waits until a response is received&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-forms-plugin&#34;&gt; forms&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/pg-importing-csv-files&#34;&gt;importingCsvFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes a specifically-named directory structure of CSV files and conjures bulk insert, update and delete statements and applies them to a PostgreSQL database - just a thin wrapper over &lt;a href=&#34;https://github.com/wmfs/tymly/tree/master/supercopy&#34;&gt;Supercopy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt; pg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/tymly-logging&#34;&gt;logging&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Logs to the console via a template&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/etl-processing-csv-files&#34;&gt;processingCsvFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Smash CSV files into more manageable files based on column values - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/smithereens&#34;&gt;Smithereens&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-etl-plugin&#34;&gt; etl&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/etl-processing-xml-files&#34;&gt;processingXmlFiles&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes an XML file and converts it to CSV&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-etl-plugin&#34;&gt; etl&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/rankings-refresh-ranking&#34;&gt;refreshRanking&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Regenerates a database view of ranked data&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-rankings-plugin&#34;&gt; rankings&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/alerts-sending-email&#34;&gt;sendingEmail&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;For sending an emails - just a thin wrapper over &lt;a href=&#34;https://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-alerts-plugin&#34;&gt; alerts&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/pg-synchronizing-table&#34;&gt;synchronizingTable&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Takes the contents of one PostgreSQL table, applies a transformation function to each row and ensures a target table is kept in sync - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/pg-telepods&#34;&gt;pg-telepods&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt; pg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;state-resources/tymly-upserting&#34;&gt;upserting&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Perists a document to storage&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;list-of-commands&#34;&gt;List of commands&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Commands allow states to be configured to access dynamic runtime values (e.g. from the Tymly context, environment variable etc.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;commands/tymly-env&#34;&gt;env&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allows a state to refer to an environment variable&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;commands/tymly-sprintf&#34;&gt;sprintf&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Derive a runtime value using a &lt;a href=&#34;https://github.com/alexei/sprintf.js&#34;&gt;sprintf&lt;/a&gt; string template&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;commands/tymly-value&#34;&gt;value&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Get a value from the Tymly&amp;#39;s context&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;list-of-services&#34;&gt;List of services&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;After the boot-up process, Tymly will return many ready-to-use &lt;em&gt;services&lt;/em&gt;. Most services are internal things (like &lt;a href=&#34;https://wmfs.github.io/reference/services/tymly-caches&#34;&gt;caches&lt;/a&gt;) and are probably only of interest if you&amp;rsquo;re writing your own plugins. However, some services (like &lt;a href=&#34;https://wmfs.github.io/reference/services/express-server&#34;&gt;server&lt;/a&gt;) offer key Tymly functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Plugin&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/express-auth&#34;&gt;auth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides JWT-based authentication capabilities&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-express-plugin&#34;&gt; express&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-blueprint-docs&#34;&gt;blueprintDocs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allows tracking of documents created via blueprints, so they don&amp;#39;t get reverted when Tymly restarts&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-caches&#34;&gt;caches&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds &lt;a href=&#34;https://www.npmjs.com/package/lru-cache&#34;&gt;lru-cache&lt;/a&gt;-based caching to Tymly. Note defaults will be used if no &lt;code&gt;caches&lt;/code&gt; configuration is provided.&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-commands&#34;&gt;commands&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Service to support blueprint commands&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/alerts-email&#34;&gt;email&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Integrates Tymly with &lt;a href=&#34;https://nodemailer.com/&#34;&gt;Nodemailer&lt;/a&gt; to offer email-sending capabilities&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-alerts-plugin&#34;&gt; alerts&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-expression&#34;&gt;expression&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides safe, &lt;a href=&#34;https://www.npmjs.com/package/esprima&#34;&gt;Esprima&lt;/a&gt;-based expression evaluation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/forms-forms&#34;&gt;forms&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes UI configuration (as supplied via blueprints in &lt;a href=&#34;http://schemaform.io/&#34;&gt;Schema Form&lt;/a&gt; format)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-forms-plugin&#34;&gt; forms&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-functions&#34;&gt;functions&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds ability to run custom logic as defined in a blueprint&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-inventory&#34;&gt;inventory&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collates component information by scanning plugins. The results can then be used by tooling and documentation-generators&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/rankings-rankings&#34;&gt;rankings&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds a ranking engine&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-rankings-plugin&#34;&gt; rankings&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-rbac&#34;&gt;rbac&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides JWT-based authentication capabilities&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-registry&#34;&gt;registry&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a mechanism for states to refer to site-specific values&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/express-server&#34;&gt;server&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a CORS-enabled Express.js server. Includes serving of static assets as supplied via Bluepints&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-express-plugin&#34;&gt; express&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/solr-solr&#34;&gt;solr&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds Solr support&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-solr-plugin&#34;&gt; solr&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-statebox&#34;&gt;statebox&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Runs state machines defined in Amazon States Language&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/express-statebox-api&#34;&gt;stateboxApi&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Exposes the core Tymly abilities (start, get, update and cancel) over a JWT-secured REST API&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-express-plugin&#34;&gt; express&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-storage&#34;&gt;storage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;This is the default in-memory storage service that ships with Tymly. Useful for testing and not much else.&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/pg-storage&#34;&gt;storage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Replaces the default in-memory storage solution with a MongoDB-backed alternative&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt; pg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-tags&#34;&gt;tags&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Provides a generic mechanism to help tag/classify search results, tasks, forms etc.&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-temp&#34;&gt;temp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Helps configure and manage a temporary folder for Tymly to use&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;services/tymly-users&#34;&gt;users&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Adds user-management capabilities to Tymly (e.g. authorization checks, what flows/forms a user is entitled to instigate etc.)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt; tymly&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://wmfs.github.io/license/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>https://wmfs.github.io/license/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;The MIT License (MIT)&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2017 West Midlands Fire Service&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>exportingCsvDeltaFile stateResource</title>
      <link>https://wmfs.github.io/reference/state-resources/pg-exporting-csv-delta-file/</link>
      <pubDate>Sun, 08 Oct 2017 21:06:27 +0000</pubDate>
      
      <guid>https://wmfs.github.io/reference/state-resources/pg-exporting-csv-delta-file/</guid>
      <description>

&lt;p&gt;Outputs change-only-update CSV files (or “delta” files) that contain all the necessary actions required to re-synchronize rows in a cloned table - just a thin wrapper over &lt;a href=&#34;https://www.npmjs.com/package/pg-delta-file&#34;&gt;pg-delta-file&lt;/a&gt;. This stateResource is provided via the
&lt;a href=&#34;https://wmfs.github.io/plugins/tymly-pg-plugin&#34;&gt;pg&lt;/a&gt; plugin  and isn&amp;#39;t offered by any of the other core plugins.&lt;/p&gt;

&lt;h2 id=&#34;state-config&#34;&gt;State config&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This state doesn&amp;rsquo;t require any configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;related&#34;&gt;Related&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>findingById stateResource</title>
      <link>https://wmfs.github.io/reference/state-resources/tymly-finding-by-id/</link>
      <pubDate>Sun, 08 Oct 2017 21:06:27 +0000</pubDate>
      
      <guid>https://wmfs.github.io/reference/state-resources/tymly-finding-by-id/</guid>
      <description>

&lt;p&gt;Fetches a single document by its primary key values from storage and adds to a Tymly context. This stateResource is provided via the
&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt;tymly&lt;/a&gt; plugin  and isn&amp;#39;t offered by any of the other core plugins.&lt;/p&gt;

&lt;h2 id=&#34;state-config&#34;&gt;State config&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This state doesn&amp;rsquo;t require any configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;related&#34;&gt;Related&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>findingOne stateResource</title>
      <link>https://wmfs.github.io/reference/state-resources/tymly-finding-one/</link>
      <pubDate>Sun, 08 Oct 2017 21:06:27 +0000</pubDate>
      
      <guid>https://wmfs.github.io/reference/state-resources/tymly-finding-one/</guid>
      <description>

&lt;p&gt;Finds one document from storage. This stateResource is provided via the
&lt;a href=&#34;https://wmfs.github.io/plugins/tymly&#34;&gt;tymly&lt;/a&gt; plugin  and isn&amp;#39;t offered by any of the other core plugins.&lt;/p&gt;

&lt;h2 id=&#34;state-config&#34;&gt;State config&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This state doesn&amp;rsquo;t require any configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&#34;related&#34;&gt;Related&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>